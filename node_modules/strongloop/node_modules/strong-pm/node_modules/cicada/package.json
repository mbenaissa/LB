{
  "name": "cicada",
  "version": "1.1.1",
  "description": "a teeny git-based continuous integration server",
  "main": "index.js",
  "directories": {
    "example": "example",
    "test": "test"
  },
  "dependencies": {
    "inherits": "~1.0.0",
    "mkdirp": "~0.3.3",
    "pushover": "~1.3.2",
    "shell-quote": "~0.0.1"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "devDependencies": {
    "tap": "~0.3.3",
    "comandante": "~0.0.1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/cicada.git"
  },
  "homepage": "https://github.com/substack/cicada",
  "keywords": [
    "ci",
    "continuous",
    "integration",
    "git",
    "push",
    "test"
  ],
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "license": "MIT",
  "readme": "# cicada\n\na teeny git-based continuous integration server\n\n[![build status](https://secure.travis-ci.org/substack/cicada.png)](http://travis-ci.org/substack/cicada)\n\n# example\n\nJust hack up a cicada server:\n\n``` js\nvar http = require('http');\nvar cicada = require('cicada');\n\nvar ci = cicada('/tmp/blarg');\nci.on('commit', function (commit) {\n    commit.run('test').on('exit', function (code) {\n        var status = code === 0 ? 'PASSED' : 'FAILED';\n        console.log(commit.hash + ' ' + status);\n    });\n});\n\nvar server = http.createServer(ci.handle);\nserver.listen(5255);\n```\n\nrun it\n\n```\n$ node example/ci.js \n```\n\npush some code to it:\n\n```\n$ git push http://localhost:5255/choose.git \nTo http://localhost:5255/choose.git\n   c79cef8..3537c0f  master -> master\n```\n\nand watch the results whiz by!\n\n```\nb7c19c9fd2c34176bd6eef436a69ab7a470ff98d PASSED\nc79cef8c54a9abc2b2d6ecd179d41463767be526 FAILED\n3537c0f83606788bdfb065242a6851b20504fe3e PASSED\n```\n\n# methods\n\n``` js\nvar cicada = require('cicada')\n```\n\n## var ci = cicada(opts, cb)\n\nCreate a new ci server using `opts.repodir` for storing git blobs and\n`opts.workdir` for checking out code.\n\nIf `opts.repodir` is a function, check out repositories to the directory\nspecified by the return value of `opts.repodir(repo)` where `repo` is the repo\nname as a string.\n\nIf `opts.workdir` is a function, check out repositories to the directory\nspecified by the return value of `opts.workdir(commit)` where `commit` is a\ncommit object described below.\n\nIf `opts` is a string, use `opts + '/repo'` and `opts + '/work'`.\n\nIf `opts.basedir` is a string, use `opts.basedir + '/repo'` and `opts.basedir + '/work'`.\n\nIf `opts.bare` is `true` the repo will not be checked out into the `workdir` during a push. If not specified `opts.bare` defaults to `false`.\n\nIf `cb` is provided, it acts as a listener for the `'commit'` event.\n\n## ci.handle(req, res)\n\nHandle requests from an http server. This is necessary to make git work over\nhttp.\n\n## ci.checkout(repo, commit, branch, cb)\n\nManually check out a commit into the workdir.\n\nThe errback `cb(err, commit)` fires with an error or a commit object.\n\n# events\n\n## ci.on('push', function (push) {})\n\nEmitted when somebody pushes to the server.\n\n`push` comes from the [`pushover`](https://github.com/substack/pushover#reposonpush-function-push---) module.\n\nIf you implement a `on('push')` handler you must call `push.accept()` inside of it for the push to complete, otherwise the git client will hang on the other end.\n\n## ci.on('commit', function (commit) {})\n\nAfter a push occurs, the commit will be checked out into the workdir.\nOnce the commit is all checked out, this event fires with a commit handle\ndescribed below.\n\n## ci.on('error', function (err) {}\n\nEmitted when errors occur.\n\n# commit object\n\nCommit objects are emitted by the `'commit'` event or they may be created\nmanually with the `ci.checkout()` function.\n\n## commit.run(scriptName, opts)\n\nRun a command from the package.json script hash with `npm run-script`.\n\nReturns the process object.\n\n## commit.spawn(command, args, opts)\n\nSpawn an ordinary shell command in the `commit.dir`.\n\nReturns the process object.\n\n## commit properties\n\ncommit objects have these properties:\n\n* commit.hash - the full git hash string for this commit\n* commit.id - a combination of the hash and the date in microseconds\n* commit.dir - the working directory the commit is checked out into\n* commit.repo - the repository this commit came from\n* commit.branch - the branch this commit came from\n\n# install\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install cicada\n```\n\n# license\n\nMIT\n",
  "readmeFilename": "readme.markdown",
  "_id": "cicada@1.1.1",
  "dist": {
    "shasum": "bba5b8eac66b709cf4fa0752484af76e31c0bd3e",
    "tarball": "http://registry.npmjs.org/cicada/-/cicada-1.1.1.tgz"
  },
  "_from": "cicada@^1.1.1",
  "_npmVersion": "1.2.11",
  "_npmUser": {
    "name": "substack",
    "email": "mail@substack.net"
  },
  "maintainers": [
    {
      "name": "substack",
      "email": "mail@substack.net"
    }
  ],
  "_shasum": "bba5b8eac66b709cf4fa0752484af76e31c0bd3e",
  "_resolved": "https://registry.npmjs.org/cicada/-/cicada-1.1.1.tgz"
}
