// Generated by CoffeeScript 1.8.0
(function() {
  var cp, create_pipes, dir, fs, name, read_pipes, timeout, tmp_dir, _i, _len, _ref;

  cp = require('child_process');

  fs = require('fs');

  tmp_dir = '/tmp';

  _ref = ['TMPDIR', 'TMP', 'TEMP'];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    name = _ref[_i];
    if ((dir = process.env[name]) != null) {
      tmp_dir = dir.replace(/\/$/, '');
    }
  }

  timeout = function(limit, msg) {
    if ((new Date).getTime() > limit) {
      throw new Error(msg);
    }
  };

  create_pipes = function() {
    var created, t_limit;
    t_limit = (new Date).getTime() + 1000;
    while (!created) {
      try {
        dir = tmp_dir + '/sync-exec-' + Math.floor(Math.random() * 1000000000);
        fs.mkdir(dir);
        created = true;
      } catch (_error) {}
      timeout(t_limit, 'Can not create sync-exec directory');
    }
    return dir;
  };

  read_pipes = function(dir, max_wait) {
    var deleted, pipe, read, result, t_limit, _j, _len1, _ref1;
    t_limit = (new Date).getTime() + max_wait;
    while (!read) {
      try {
        if (fs.readFileSync(dir + '/done').length) {
          read = true;
        }
      } catch (_error) {}
      timeout(t_limit, 'Process execution timeout or exit flag read failure');
    }
    while (!deleted) {
      try {
        fs.unlinkSync(dir + '/done');
        deleted = true;
      } catch (_error) {}
      timeout(t_limit, 'Can not delete exit code file');
    }
    result = {};
    _ref1 = ['stdout', 'stderr', 'status'];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      pipe = _ref1[_j];
      result[pipe] = fs.readFileSync(dir + '/' + pipe, {
        encoding: 'utf-8'
      });
      read = true;
      fs.unlinkSync(dir + '/' + pipe);
    }
    try {
      fs.rmdirSync(dir);
    } catch (_error) {}
    result.status = Number(result.status);
    return result;
  };

  module.exports = function(cmd, max_wait, options) {
    var _ref1;
    if (max_wait && typeof max_wait === 'object') {
      _ref1 = [max_wait, null], options = _ref1[0], max_wait = _ref1[1];
    }
    if (options == null) {
      options = {};
    }
    if (!(typeof options === 'object' && options)) {
      throw new Error('options must be an object');
    }
    if (max_wait == null) {
      max_wait = options.max_wait || 3600000;
    }
    if (!((max_wait == null) || max_wait >= 1)) {
      throw new Error('max wait must be >=1 millisecond');
    }
    delete options.max_wait;
    dir = create_pipes();
    cmd = '(' + cmd + ' > ' + dir + '/stdout 2> ' + dir + '/stderr ); echo $?' + ' > ' + dir + '/status ; echo 1 > ' + dir + '/done';
    cp.exec(cmd, options, function() {});
    return read_pipes(dir, max_wait);
  };

}).call(this);
