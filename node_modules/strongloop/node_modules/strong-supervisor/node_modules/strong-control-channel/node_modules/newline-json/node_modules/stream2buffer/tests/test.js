var test = require('tap').test;
var fs = require('fs');
var streamToBuffer = require('../');
var Readable = require('stream').Readable;

test('buffers', function (t) {
  var hamlet = __dirname + '/fixtures/hamlet.txt';
  var expected = fs.readFileSync(hamlet).toString('utf8');
  streamToBuffer(fs.createReadStream(hamlet), function (err, buff) {
    t.ok(!err, 'no error');
    t.equal(buff.toString('utf8'), expected, 'got expected result');
    t.end();
  });
});


test('utf8', function (t) {
  var hamlet = __dirname + '/fixtures/hamlet.txt';
  var expected = fs.readFileSync(hamlet).toString('utf8');
  streamToBuffer(fs.createReadStream(hamlet, { encoding: 'utf8' }), function (err, buff) {
    t.ok(!err, 'no error');
    t.equal(buff.toString(), expected, 'got expected result');
    t.end();
  });
});

test('ascii', function (t) {
  var hamlet = __dirname + '/fixtures/hamlet.txt';
  var expected = fs.readFileSync(hamlet).toString('ascii');
  streamToBuffer(fs.createReadStream(hamlet, { encoding: 'ascii' }), function (err, buff) {
    t.ok(!err, 'no error');
    t.equal(buff.toString(), expected, 'got expected result');
    t.end();
  });
});

test('object mode', function (t) {
  var rs = new Readable({ objectMode: true });

  var N = 100;
  var n = 0;
  rs._read = function() {
    if (n === 100)
      return rs.push(null);

    rs.push({
      "hello": "world",
      "n": n++
    });
  };

  streamToBuffer(rs, function (err, buff) {
    t.ok(!err, 'no error');
    t.equal(typeof buff, 'object', 'buff is an object');
    t.equal(N, buff.length, 'it has '+N+' elements');
    t.end();
  });

});
