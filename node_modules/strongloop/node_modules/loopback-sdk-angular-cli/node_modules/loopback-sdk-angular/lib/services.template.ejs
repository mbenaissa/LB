(function(window, angular, undefined) {'use strict';

var urlBase = <%-: urlBase | q %>;
var authHeader = 'authorization';

/**
 * @ngdoc overview
 * @name <%- moduleName %>
 * @module
 * @description
 *
 * The `<%- moduleName %>` module provides services for interacting with
 * the models exposed by the LoopBack server via the REST API.
 *
 */
var module = angular.module(<%-: moduleName | q %>, ['ngResource']);

<% for (var modelName in models) {
     var meta = models[modelName];

     // capitalize the model name
     modelName = modelName[0].toUpperCase() + modelName.slice(1);
-%>
/**
 * @ngdoc object
 * @name <%-: moduleName %>.<%-: modelName %>
 * @header <%-: moduleName %>.<%-: modelName %>
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `<%-: modelName %>` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
<% /*
    * TODO(bajtos) provide an example of performing basic CrUD operations,
    * including filter/where find query
    */ -%>
 */
module.factory(
  <%-: modelName | q %>,
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + <%-: meta.ctor.getFullPath() | q %>,
<% /*
        Constructor arguments are hardcoded for now.
        We should generate it from sharedCtor.accepts instead.
*/ -%>
      { 'id': '@id' },
      {
<% meta.methods.forEach(function(action) {
     var methodName = action.name.split('.').join('$');
-%>
<%   ngdocForMethod(modelName, methodName, action); -%>
        <%-: methodName | q %>: {
<% if (action.isReturningArray()) { -%>
          isArray: true,
<% } -%>
<% if (meta.isUser && methodName === 'login') { -%>
          params: {
            include: "user"
          },
          interceptor: {
            response: function(response) {
              var accessToken = response.data;
              LoopBackAuth.setUser(accessToken.id, accessToken.userId, accessToken.user);
              LoopBackAuth.rememberMe = response.config.params.rememberMe !== false;
              LoopBackAuth.save();
              return response.resource;
            }
          },
<% } else if (meta.isUser && methodName === 'logout') { -%>
          interceptor: {
            response: function(response) {
              LoopBackAuth.clearUser();
              LoopBackAuth.clearStorage();
              return response.resource;
            }
          },
<% } -%>
          url: urlBase + <%-: action.getFullPath() | q %>,
          method: <%-: action.getHttpMethod() | q %>
        },
<% }); // meta.methods.foreach -%>
<% if (meta.isUser) { -%>

        /**
         * @ngdoc method
         * @name <%- moduleName %>.<%- modelName %>#getCurrent
         * @methodOf <%- moduleName %>.<%- modelName %>
         *
         * @description
         *
         * Get data of the currently logged user. Fail with HTTP result 401
         * when there is no user logged in.
         *
         * @param {function(Object,Object)=} successCb
         *    Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *    `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         */
        "getCurrent": {
           url: urlBase + <%-: meta.getPath() | q %> + "/:id",
           method: "GET",
           params: {
             id: function() {
              var id = LoopBackAuth.currentUserId;
              if (id == null) id = '__anonymous__';
              return id;
            },
          },
          interceptor: {
            response: function(response) {
              LoopBackAuth.currentUserData = response.data;
              return response.resource;
            }
          },
          __isGetCurrentUser__ : true
        }
<% } -%>
      }
    );


<% meta.methods.forEach(function(action) {
    var methodName = action.name.split('.').join('$');
    (action.sharedMethod.aliases || []).forEach(function(alias) {
      var aliasMethod = alias.split('.').join('$');

      ngdocForMethod(modelName, aliasMethod, action); -%>
        R[<%-: aliasMethod | q %>] = R[<%-: methodName | q %>];
<%  }); // aliases.foreach
  }); // meta.methods.foreach
-%>

<% if (meta.isUser) { -%>
        /**
         * @ngdoc method
         * @name <%- moduleName %>.<%- modelName %>#getCachedCurrent
         * @methodOf <%- moduleName %>.<%- modelName %>
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link <%- moduleName %>.<%- modelName %>#login} or
         * {@link <%- moduleName %>.<%- modelName %>#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A <%- modelName %> instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name <%- moduleName %>.<%- modelName %>#isAuthenticated
         * @methodOf <%- moduleName %>.<%- modelName %>
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name <%- moduleName %>.<%- modelName %>#getCurrentId
         * @methodOf <%- moduleName %>.<%- modelName %>
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };
<% } -%>

    /**
    * @ngdoc property
    * @name <%- moduleName %>.<%- modelName %>#modelName
    * @propertyOf <%- moduleName %>.<%- modelName %>
    * @description
    * The name of the model represented by this $resource,
    * i.e. `<%- modelName %>`.
    */
    R.modelName = <%-: modelName | q %>;

<% for (var scopeName in meta.scopes) {
      var scope = meta.scopes[scopeName];
      if (!scope) continue;
      var scopeMethods = scope.methods;
      // Angular names always start with a capital letter
      var targetClass = scope.targetClass[0].toUpperCase() + scope.targetClass.slice(1);

      if (Object.keys(scopeMethods).length > 1) {
-%>
    /**
     * @ngdoc object
     * @name lbServices.<%- modelName %>.<%- scopeName %>
     * @header lbServices.<%- modelName %>.<%- scopeName %>
     * @object
     * @description
     *
     * The object `<%- modelName %>.<%- scopeName %>` groups methods
     * manipulating `<%- targetClass %>` instances related to `<%- modelName %>`.
     *
     * Call {@link lbServices.<%- modelName %>#<%- scopeName %> <%- modelName %>.<%- scopeName %>()}
     * to query all related instances.
     */

<%
      }

      // sort the names to make sure the get method creating the scope
      // is emitted first (R.categories before R.categories.create)
      Object.keys(scopeMethods).sort().forEach(function(methodName) {
        var action = scopeMethods[methodName];

        // modelName is e.g. 'User'
        // methodName is e.g. 'accessTokens.create'
        // we need to convert it to 'User.accessTokens' and 'create'
        var names = methodName.split('.');
        var ngMethod = names.pop();
        var ngClass = [modelName].concat(names).join('.');

        ngdocForMethod(ngClass, ngMethod, action, targetClass);
-%>
        R.<%- methodName %> = function() {
          var TargetResource = $injector.get(<%-: targetClass | q %>);
          var action = TargetResource[<%-: action.name | q %>];
          return action.apply(R, arguments);
        };
<%    }); // forEach methods name -%>
<% } // for each scope -%>

    return R;
  }]);

<% } // for modelName in models -%>

module
  .factory('LoopBackAuth', function() {
    var props = ['accessTokenId', 'currentUserId'];
    var propsPrefix = '$LoopBack$';

    function LoopBackAuth() {
      var self = this;
      props.forEach(function(name) {
        self[name] = load(name);
      });
      this.rememberMe = undefined;
      this.currentUserData = null;
    }

    LoopBackAuth.prototype.save = function() {
      var self = this;
      var storage = this.rememberMe ? localStorage : sessionStorage;
      props.forEach(function(name) {
        save(storage, name, self[name]);
      });
    };

    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {
      this.accessTokenId = accessTokenId;
      this.currentUserId = userId;
      this.currentUserData = userData;
    }

    LoopBackAuth.prototype.clearUser = function() {
      this.accessTokenId = null;
      this.currentUserId = null;
      this.currentUserData = null;
    }

    LoopBackAuth.prototype.clearStorage = function() {
      props.forEach(function(name) {
        save(sessionStorage, name, null);
        save(localStorage, name, null);
      });
    };

    return new LoopBackAuth();

    // Note: LocalStorage converts the value to string
    // We are using empty string as a marker for null/undefined values.
    function save(storage, name, value) {
      var key = propsPrefix + name;
      if (value == null) value = '';
      storage[key] = value;
    }

    function load(name) {
      var key = propsPrefix + name;
      return localStorage[key] || sessionStorage[key] || null;
    }
  })
  .config(['$httpProvider', function($httpProvider) {
    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');
  }])
  .factory('LoopBackAuthRequestInterceptor', [ '$q', 'LoopBackAuth',
    function($q, LoopBackAuth) {
      return {
        'request': function(config) {

          // filter out non urlBase requests
          if (config.url.substr(0, urlBase.length) !== urlBase) {
            return config;
          }

          if (LoopBackAuth.accessTokenId) {
            config.headers[authHeader] = LoopBackAuth.accessTokenId;
          } else if (config.__isGetCurrentUser__) {
            // Return a stub 401 error for User.getCurrent() when
            // there is no user logged in
            var res = {
              body: { error: { status: 401 } },
              status: 401,
              config: config,
              headers: function() { return undefined; }
            };
            return $q.reject(res);
          }
          return config || $q.when(config);
        }
      }
    }])

  /**
   * @ngdoc object
   * @name <%-: moduleName %>.LoopBackResourceProvider
   * @header <%-: moduleName %>.LoopBackResourceProvider
   * @description
   * Use `LoopBackResourceProvider` to change the global configuration
   * settings used by all models. Note that the provider is available
   * to Configuration Blocks only, see
   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}
   * for more details.
   *
   * ## Example
   *
   * ```js
   * angular.module('app')
   *  .config(function(LoopBackResourceProvider) {
   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');
   *  });
   * ```
   */
  .provider('LoopBackResource', function LoopBackResourceProvider() {
    /**
     * @ngdoc method
     * @name <%-: moduleName %>.LoopBackResourceProvider#setAuthHeader
     * @methodOf <%-: moduleName %>.LoopBackResourceProvider
     * @param {string} header The header name to use, e.g. `X-Access-Token`
     * @description
     * Configure the REST transport to use a different header for sending
     * the authentication token. It is sent in the `Authorization` header
     * by default.
     */
    this.setAuthHeader = function(header) {
      authHeader = header;
    };

    /**
     * @ngdoc method
     * @name <%-: moduleName %>.LoopBackResourceProvider#setUrlBase
     * @methodOf <%-: moduleName %>.LoopBackResourceProvider
     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.
     * @description
     * Change the URL of the REST API server. By default, the URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.setUrlBase = function(url) {
      urlBase = url;
    };

    this.$get = ['$resource', function($resource) {
      return function(url, params, actions) {
        var resource = $resource(url, params, actions);

        // Angular always calls POST on $save()
        // This hack is based on
        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/
        resource.prototype.$save = function(success, error) {
          // Fortunately, LoopBack provides a convenient `upsert` method
          // that exactly fits our needs.
          var result = resource.upsert.call(this, {}, this, success, error);
          return result.$promise || result;
        };
        return resource;
      };
    }];
  });
<%
function getJsDocType(arg) {
  var type = arg.type == 'any' ? '*' : arg.type;
  if (!arg.required) type += '=';
  return type;
}

function ngdocForMethod(modelName, methodName, action, responseModelName) {
   // always add an empty line before the ngdoc comment:
-%>

<%
  if (action.internal) {
-%>
        // INTERNAL. <%- action.internal %>
<%
    return;
  }
-%>
        /**
         * @ngdoc method
         * @name <%- moduleName %>.<%- modelName %>#<%- methodName %>
         * @methodOf <%- moduleName %>.<%- modelName %>
<% if (action.deprecated) { -%>
         * @deprecated <%- action.deprecated %>
<% } -%>
         *
         * @description
         *
<% if (!action.description) {
action.description =  '<em>\n' +
  '(The remote method definition does not provide any description.)\n' +
  '</em>';
} -%>
         * <%-: action.description | replace:/\n/g, '\n         * ' %>
         *
<%
var params = action.accepts;
var postData;
if (action.getHttpMethod() == 'POST' || action.getHttpMethod() == 'PUT') {
  params = params.filter(function(arg) {
    return arg.http && (arg.http.source == 'query' || arg.http.source == 'path');
  });
  postData = action.accepts.filter(function(arg) {
    return params.indexOf(arg) == -1;
  });
}
-%>
         * @param {Object=} parameters Request parameters.
<% if (params.length == 0) { -%>
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
<% } else { params.forEach(function(arg) { -%>
         *
         *  - `<%- arg.arg %>` – `{<%- getJsDocType(arg)  %>}` - <%-
(arg.description || '').replace(/\n/g, '\n         *   ') %>
<%   if (meta.isUser && methodName === 'login' && arg.arg === 'include') { -%>
         *   Default value: `user`.
<%   } -%>
<% }); } -%>
<% if (meta.isUser && methodName === 'login') { -%>
         *
         *  - `rememberMe` - `boolean` - Whether the authentication credentials
         *     should be remembered in localStorage across app/browser restarts.
         *     Default: `true`.
<% } -%>
<% if (postData) { -%>
         *
         * @param {Object} postData Request data.
<% if (postData.length == 0) { -%>
         *
         * This method does not accept any data. Supply an empty object.
<% } else if (postData.length == 1 && postData[0].http &&
      postData[0].http.source == 'body') { -%>
         *
         * This method expects a subset of model properties as request parameters.
<% } else {
postData.forEach(function(arg) { -%>
         *
         *  - `<%- arg.arg %>` – `{<%- getJsDocType(arg)  %>}` - <%-
(arg.description || '').replace(/\n/g, '\n         *   ') %>
<%   });
  }
} -%>
         *
<% var returnType = action.isReturningArray() ? 'Array.<Object>': 'Object'; -%>
         * @param {function(<%- returnType %>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {<%- returnType %>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
<% if (!action.returns || action.returns.length == 0) { -%>
         * This method returns no data.
<% } else if (action.returns[0].root) { -%>
<%   if (action.returns[0].description) { -%>
         * <%- action.returns[0].description
.replace(/\n/g, '\n         * ').trimRight() %>
<%   } else { -%>
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `<%- responseModelName || modelName %>` object.)
         * </em>
<%   } -%>
<% } else { -%>
         * Data properties:
<%   action.returns.forEach(function(arg) { -%>
         *
         *  - `<%- arg.arg %>` – `{<%- getJsDocType(arg)  %>}` - <%-
(arg.description || '').replace(/\n/g, '\n         *   ') %>
<%   });
   }
-%>
         */
<% } // end of ngdocForMethod -%>

})(window, window.angular);
