SLC()                                                                    SLC()

NNAAMMEE
       ssllcc - StrongLoop Controller

       Command-line tool for development and control of a Node application.

SSYYNNOOPPSSIISS
       slc [-h|--help|-v|--version] [...]
       slc <command> [--help] [...]

OOPPTTIIOONNSS
       --hh, ----hheellpp
              print  usage for slc (use ssllcc ccmmdd --hh for help on ccmmdd), and exit.

       --vv, ----vveerrssiioonn
              print version of slc and node, and exit.

CCOOMMMMAANNDDSS
       +o   aarrcc: launch StrongLoop GUI

       +o   bbuuiilldd: build a node application package using strong-build

       +o   cclluusstteerrccttll: same as rruunnccttll

       +o   ddeebbuugg: debug a node script using node-inspector

       +o   ddeeppllooyy: deploy a node application package using strong-deploy

       +o   eennvv: print node environment information

       +o   eexxaammppllee: create example applications

       +o   llbb: create LoopBack 1.x workspaces, applications, and models  (dep-
           recated)

       +o   llooooppbbaacckk:  create  LoopBack  2.x applications, datasources, models,
           acls, and relations

       +o   ppmm: manage deployed node applications with strong-pm

       +o   ppmmccttll: control a node application using strong-pm

       +o   ppmm--iinnssttaallll: install strong-pm as an OS service

       +o   rreeggiissttrryy: switch registries and promote packages  with  strong-reg-
           istry

       +o   rruunn: run a node application using strong-supervisor

       +o   rruunnccttll: control a node application using strong-supervisor

       +o   ssttrroonnggooppss: save StrongOps API key into strongloop.json

       +o   uuppddaattee: bring strongloop and it's dependencies up-to-date

EEXXAAMMPPLLEESS
           $ slc loopback
           $ slc loopback:model
           $ slc loopback:example
           $ slc lb project mywebapp
           $ slc run app.js
           $ slc run --cluster=CPUs app.js
           $ slc runctl status
           $ slc debug app.js

                                 November 2014                           SLC()
